/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// OrderReadModelStatus Order status
type OrderReadModelStatus string

// List of OrderReadModel_status
const (
	ORDERREADMODELSTATUS_PROCESSING         OrderReadModelStatus = "PROCESSING"
	ORDERREADMODELSTATUS_AWAITING_SIGNATURE OrderReadModelStatus = "AWAITING_SIGNATURE"
	ORDERREADMODELSTATUS_SIGNATURE_REJECTED OrderReadModelStatus = "SIGNATURE_REJECTED"
	ORDERREADMODELSTATUS_SIGNATURE_EXPIRED  OrderReadModelStatus = "SIGNATURE_EXPIRED"
	ORDERREADMODELSTATUS_SUBMITTED          OrderReadModelStatus = "SUBMITTED"
	ORDERREADMODELSTATUS_COMPLETED          OrderReadModelStatus = "COMPLETED"
	ORDERREADMODELSTATUS_FAILED             OrderReadModelStatus = "FAILED"
)

// All allowed values of OrderReadModelStatus enum
var AllowedOrderReadModelStatusEnumValues = []OrderReadModelStatus{
	"PROCESSING",
	"AWAITING_SIGNATURE",
	"SIGNATURE_REJECTED",
	"SIGNATURE_EXPIRED",
	"SUBMITTED",
	"COMPLETED",
	"FAILED",
}

func (v *OrderReadModelStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderReadModelStatus(value)
	for _, existing := range AllowedOrderReadModelStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderReadModelStatus", value)
}

// NewOrderReadModelStatusFromValue returns a pointer to a valid OrderReadModelStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderReadModelStatusFromValue(v string) (*OrderReadModelStatus, error) {
	ev := OrderReadModelStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderReadModelStatus: valid values are %v", v, AllowedOrderReadModelStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderReadModelStatus) IsValid() bool {
	for _, existing := range AllowedOrderReadModelStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderReadModel_status value
func (v OrderReadModelStatus) Ptr() *OrderReadModelStatus {
	return &v
}

type NullableOrderReadModelStatus struct {
	value *OrderReadModelStatus
	isSet bool
}

func (v NullableOrderReadModelStatus) Get() *OrderReadModelStatus {
	return v.value
}

func (v *NullableOrderReadModelStatus) Set(val *OrderReadModelStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderReadModelStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderReadModelStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderReadModelStatus(val *OrderReadModelStatus) *NullableOrderReadModelStatus {
	return &NullableOrderReadModelStatus{value: val, isSet: true}
}

func (v NullableOrderReadModelStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderReadModelStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

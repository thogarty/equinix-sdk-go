/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// GetIbxsConnectionAsideAccessPointTypeParameter the model 'GetIbxsConnectionAsideAccessPointTypeParameter'
type GetIbxsConnectionAsideAccessPointTypeParameter string

// List of getIbxs_connection_aside_accessPoint_type_parameter
const (
	GETIBXSCONNECTIONASIDEACCESSPOINTTYPEPARAMETER_COLO GetIbxsConnectionAsideAccessPointTypeParameter = "COLO"
	GETIBXSCONNECTIONASIDEACCESSPOINTTYPEPARAMETER_VD   GetIbxsConnectionAsideAccessPointTypeParameter = "VD"
	GETIBXSCONNECTIONASIDEACCESSPOINTTYPEPARAMETER_PORT GetIbxsConnectionAsideAccessPointTypeParameter = "PORT"
)

// All allowed values of GetIbxsConnectionAsideAccessPointTypeParameter enum
var AllowedGetIbxsConnectionAsideAccessPointTypeParameterEnumValues = []GetIbxsConnectionAsideAccessPointTypeParameter{
	"COLO",
	"VD",
	"PORT",
}

func (v *GetIbxsConnectionAsideAccessPointTypeParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GetIbxsConnectionAsideAccessPointTypeParameter(value)
	for _, existing := range AllowedGetIbxsConnectionAsideAccessPointTypeParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GetIbxsConnectionAsideAccessPointTypeParameter", value)
}

// NewGetIbxsConnectionAsideAccessPointTypeParameterFromValue returns a pointer to a valid GetIbxsConnectionAsideAccessPointTypeParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGetIbxsConnectionAsideAccessPointTypeParameterFromValue(v string) (*GetIbxsConnectionAsideAccessPointTypeParameter, error) {
	ev := GetIbxsConnectionAsideAccessPointTypeParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GetIbxsConnectionAsideAccessPointTypeParameter: valid values are %v", v, AllowedGetIbxsConnectionAsideAccessPointTypeParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GetIbxsConnectionAsideAccessPointTypeParameter) IsValid() bool {
	for _, existing := range AllowedGetIbxsConnectionAsideAccessPointTypeParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to getIbxs_connection_aside_accessPoint_type_parameter value
func (v GetIbxsConnectionAsideAccessPointTypeParameter) Ptr() *GetIbxsConnectionAsideAccessPointTypeParameter {
	return &v
}

type NullableGetIbxsConnectionAsideAccessPointTypeParameter struct {
	value *GetIbxsConnectionAsideAccessPointTypeParameter
	isSet bool
}

func (v NullableGetIbxsConnectionAsideAccessPointTypeParameter) Get() *GetIbxsConnectionAsideAccessPointTypeParameter {
	return v.value
}

func (v *NullableGetIbxsConnectionAsideAccessPointTypeParameter) Set(val *GetIbxsConnectionAsideAccessPointTypeParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIbxsConnectionAsideAccessPointTypeParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIbxsConnectionAsideAccessPointTypeParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIbxsConnectionAsideAccessPointTypeParameter(val *GetIbxsConnectionAsideAccessPointTypeParameter) *NullableGetIbxsConnectionAsideAccessPointTypeParameter {
	return &NullableGetIbxsConnectionAsideAccessPointTypeParameter{value: val, isSet: true}
}

func (v NullableGetIbxsConnectionAsideAccessPointTypeParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIbxsConnectionAsideAccessPointTypeParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

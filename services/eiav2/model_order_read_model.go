/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// checks if the OrderReadModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderReadModel{}

// OrderReadModel struct for OrderReadModel
type OrderReadModel struct {
	// Order URI
	Href string `json:"href"`
	// Order identifier
	Uuid      string               `json:"uuid"`
	Type      OrderReadModelType   `json:"type"`
	Status    OrderReadModelStatus `json:"status"`
	ChangeLog ChangeLog            `json:"changeLog"`
	// Order number
	Number               string                  `json:"number"`
	PurchaseOrder        *PurchaseOrderReadModel `json:"purchaseOrder,omitempty"`
	Contacts             []ContactItem           `json:"contacts,omitempty"`
	Tags                 []string                `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrderReadModel OrderReadModel

// NewOrderReadModel instantiates a new OrderReadModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderReadModel(href string, uuid string, type_ OrderReadModelType, status OrderReadModelStatus, changeLog ChangeLog, number string) *OrderReadModel {
	this := OrderReadModel{}
	this.Href = href
	this.Uuid = uuid
	this.Type = type_
	this.Status = status
	this.ChangeLog = changeLog
	this.Number = number
	return &this
}

// NewOrderReadModelWithDefaults instantiates a new OrderReadModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderReadModelWithDefaults() *OrderReadModel {
	this := OrderReadModel{}
	return &this
}

// GetHref returns the Href field value
func (o *OrderReadModel) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *OrderReadModel) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *OrderReadModel) SetHref(v string) {
	o.Href = v
}

// GetUuid returns the Uuid field value
func (o *OrderReadModel) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *OrderReadModel) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *OrderReadModel) SetUuid(v string) {
	o.Uuid = v
}

// GetType returns the Type field value
func (o *OrderReadModel) GetType() OrderReadModelType {
	if o == nil {
		var ret OrderReadModelType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *OrderReadModel) GetTypeOk() (*OrderReadModelType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OrderReadModel) SetType(v OrderReadModelType) {
	o.Type = v
}

// GetStatus returns the Status field value
func (o *OrderReadModel) GetStatus() OrderReadModelStatus {
	if o == nil {
		var ret OrderReadModelStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *OrderReadModel) GetStatusOk() (*OrderReadModelStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *OrderReadModel) SetStatus(v OrderReadModelStatus) {
	o.Status = v
}

// GetChangeLog returns the ChangeLog field value
func (o *OrderReadModel) GetChangeLog() ChangeLog {
	if o == nil {
		var ret ChangeLog
		return ret
	}

	return o.ChangeLog
}

// GetChangeLogOk returns a tuple with the ChangeLog field value
// and a boolean to check if the value has been set.
func (o *OrderReadModel) GetChangeLogOk() (*ChangeLog, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangeLog, true
}

// SetChangeLog sets field value
func (o *OrderReadModel) SetChangeLog(v ChangeLog) {
	o.ChangeLog = v
}

// GetNumber returns the Number field value
func (o *OrderReadModel) GetNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *OrderReadModel) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *OrderReadModel) SetNumber(v string) {
	o.Number = v
}

// GetPurchaseOrder returns the PurchaseOrder field value if set, zero value otherwise.
func (o *OrderReadModel) GetPurchaseOrder() PurchaseOrderReadModel {
	if o == nil || IsNil(o.PurchaseOrder) {
		var ret PurchaseOrderReadModel
		return ret
	}
	return *o.PurchaseOrder
}

// GetPurchaseOrderOk returns a tuple with the PurchaseOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderReadModel) GetPurchaseOrderOk() (*PurchaseOrderReadModel, bool) {
	if o == nil || IsNil(o.PurchaseOrder) {
		return nil, false
	}
	return o.PurchaseOrder, true
}

// HasPurchaseOrder returns a boolean if a field has been set.
func (o *OrderReadModel) HasPurchaseOrder() bool {
	if o != nil && !IsNil(o.PurchaseOrder) {
		return true
	}

	return false
}

// SetPurchaseOrder gets a reference to the given PurchaseOrderReadModel and assigns it to the PurchaseOrder field.
func (o *OrderReadModel) SetPurchaseOrder(v PurchaseOrderReadModel) {
	o.PurchaseOrder = &v
}

// GetContacts returns the Contacts field value if set, zero value otherwise.
func (o *OrderReadModel) GetContacts() []ContactItem {
	if o == nil || IsNil(o.Contacts) {
		var ret []ContactItem
		return ret
	}
	return o.Contacts
}

// GetContactsOk returns a tuple with the Contacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderReadModel) GetContactsOk() ([]ContactItem, bool) {
	if o == nil || IsNil(o.Contacts) {
		return nil, false
	}
	return o.Contacts, true
}

// HasContacts returns a boolean if a field has been set.
func (o *OrderReadModel) HasContacts() bool {
	if o != nil && !IsNil(o.Contacts) {
		return true
	}

	return false
}

// SetContacts gets a reference to the given []ContactItem and assigns it to the Contacts field.
func (o *OrderReadModel) SetContacts(v []ContactItem) {
	o.Contacts = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *OrderReadModel) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderReadModel) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *OrderReadModel) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *OrderReadModel) SetTags(v []string) {
	o.Tags = v
}

func (o OrderReadModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderReadModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["href"] = o.Href
	toSerialize["uuid"] = o.Uuid
	toSerialize["type"] = o.Type
	toSerialize["status"] = o.Status
	toSerialize["changeLog"] = o.ChangeLog
	toSerialize["number"] = o.Number
	if !IsNil(o.PurchaseOrder) {
		toSerialize["purchaseOrder"] = o.PurchaseOrder
	}
	if !IsNil(o.Contacts) {
		toSerialize["contacts"] = o.Contacts
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrderReadModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"href",
		"uuid",
		"type",
		"status",
		"changeLog",
		"number",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderReadModel := _OrderReadModel{}

	err = json.Unmarshal(data, &varOrderReadModel)

	if err != nil {
		return err
	}

	*o = OrderReadModel(varOrderReadModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "type")
		delete(additionalProperties, "status")
		delete(additionalProperties, "changeLog")
		delete(additionalProperties, "number")
		delete(additionalProperties, "purchaseOrder")
		delete(additionalProperties, "contacts")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrderReadModel struct {
	value *OrderReadModel
	isSet bool
}

func (v NullableOrderReadModel) Get() *OrderReadModel {
	return v.value
}

func (v *NullableOrderReadModel) Set(val *OrderReadModel) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderReadModel) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderReadModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderReadModel(val *OrderReadModel) *NullableOrderReadModel {
	return &NullableOrderReadModel{value: val, isSet: true}
}

func (v NullableOrderReadModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderReadModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

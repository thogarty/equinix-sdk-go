/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// OrderReadModelType Order type
type OrderReadModelType string

// List of OrderReadModel_type
const (
	ORDERREADMODELTYPE_NEW       OrderReadModelType = "NEW"
	ORDERREADMODELTYPE_AMENDMENT OrderReadModelType = "AMENDMENT"
)

// All allowed values of OrderReadModelType enum
var AllowedOrderReadModelTypeEnumValues = []OrderReadModelType{
	"NEW",
	"AMENDMENT",
}

func (v *OrderReadModelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderReadModelType(value)
	for _, existing := range AllowedOrderReadModelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderReadModelType", value)
}

// NewOrderReadModelTypeFromValue returns a pointer to a valid OrderReadModelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderReadModelTypeFromValue(v string) (*OrderReadModelType, error) {
	ev := OrderReadModelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderReadModelType: valid values are %v", v, AllowedOrderReadModelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderReadModelType) IsValid() bool {
	for _, existing := range AllowedOrderReadModelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderReadModel_type value
func (v OrderReadModelType) Ptr() *OrderReadModelType {
	return &v
}

type NullableOrderReadModelType struct {
	value *OrderReadModelType
	isSet bool
}

func (v NullableOrderReadModelType) Get() *OrderReadModelType {
	return v.value
}

func (v *NullableOrderReadModelType) Set(val *OrderReadModelType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderReadModelType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderReadModelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderReadModelType(val *OrderReadModelType) *NullableOrderReadModelType {
	return &NullableOrderReadModelType{value: val, isSet: true}
}

func (v NullableOrderReadModelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderReadModelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

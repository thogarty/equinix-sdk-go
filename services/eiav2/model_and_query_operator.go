/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// AndQueryOperator the model 'AndQueryOperator'
type AndQueryOperator string

// List of AndQuery_operator
const (
	ANDQUERYOPERATOR_EQUAL AndQueryOperator = "="
)

// All allowed values of AndQueryOperator enum
var AllowedAndQueryOperatorEnumValues = []AndQueryOperator{
	"=",
}

func (v *AndQueryOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AndQueryOperator(value)
	for _, existing := range AllowedAndQueryOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AndQueryOperator", value)
}

// NewAndQueryOperatorFromValue returns a pointer to a valid AndQueryOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAndQueryOperatorFromValue(v string) (*AndQueryOperator, error) {
	ev := AndQueryOperator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AndQueryOperator: valid values are %v", v, AllowedAndQueryOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AndQueryOperator) IsValid() bool {
	for _, existing := range AllowedAndQueryOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AndQuery_operator value
func (v AndQueryOperator) Ptr() *AndQueryOperator {
	return &v
}

type NullableAndQueryOperator struct {
	value *AndQueryOperator
	isSet bool
}

func (v NullableAndQueryOperator) Get() *AndQueryOperator {
	return v.value
}

func (v *NullableAndQueryOperator) Set(val *AndQueryOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableAndQueryOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableAndQueryOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAndQueryOperator(val *AndQueryOperator) *NullableAndQueryOperator {
	return &NullableAndQueryOperator{value: val, isSet: true}
}

func (v NullableAndQueryOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAndQueryOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

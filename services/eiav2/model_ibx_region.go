/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// IbxRegion the model 'IbxRegion'
type IbxRegion string

// List of Ibx_region
const (
	IBXREGION_APAC IbxRegion = "APAC"
	IBXREGION_EMEA IbxRegion = "EMEA"
	IBXREGION_AMER IbxRegion = "AMER"
)

// All allowed values of IbxRegion enum
var AllowedIbxRegionEnumValues = []IbxRegion{
	"APAC",
	"EMEA",
	"AMER",
}

func (v *IbxRegion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IbxRegion(value)
	for _, existing := range AllowedIbxRegionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IbxRegion", value)
}

// NewIbxRegionFromValue returns a pointer to a valid IbxRegion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIbxRegionFromValue(v string) (*IbxRegion, error) {
	ev := IbxRegion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IbxRegion: valid values are %v", v, AllowedIbxRegionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IbxRegion) IsValid() bool {
	for _, existing := range AllowedIbxRegionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Ibx_region value
func (v IbxRegion) Ptr() *IbxRegion {
	return &v
}

type NullableIbxRegion struct {
	value *IbxRegion
	isSet bool
}

func (v NullableIbxRegion) Get() *IbxRegion {
	return v.value
}

func (v *NullableIbxRegion) Set(val *IbxRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableIbxRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableIbxRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIbxRegion(val *IbxRegion) *NullableIbxRegion {
	return &NullableIbxRegion{value: val, isSet: true}
}

func (v NullableIbxRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIbxRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// ContactItemAvailability the model 'ContactItemAvailability'
type ContactItemAvailability string

// List of ContactItem_availability
const (
	CONTACTITEMAVAILABILITY_WORK_HOURS              ContactItemAvailability = "WORK_HOURS"
	CONTACTITEMAVAILABILITY_ANYTIME                 ContactItemAvailability = "ANYTIME"
	CONTACTITEMAVAILABILITY_CUSTOMER_BUSINESS_HOURS ContactItemAvailability = "CUSTOMER_BUSINESS_HOURS"
	CONTACTITEMAVAILABILITY_NOT_AVAILABLE           ContactItemAvailability = "NOT_AVAILABLE"
)

// All allowed values of ContactItemAvailability enum
var AllowedContactItemAvailabilityEnumValues = []ContactItemAvailability{
	"WORK_HOURS",
	"ANYTIME",
	"CUSTOMER_BUSINESS_HOURS",
	"NOT_AVAILABLE",
}

func (v *ContactItemAvailability) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContactItemAvailability(value)
	for _, existing := range AllowedContactItemAvailabilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContactItemAvailability", value)
}

// NewContactItemAvailabilityFromValue returns a pointer to a valid ContactItemAvailability
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContactItemAvailabilityFromValue(v string) (*ContactItemAvailability, error) {
	ev := ContactItemAvailability(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContactItemAvailability: valid values are %v", v, AllowedContactItemAvailabilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContactItemAvailability) IsValid() bool {
	for _, existing := range AllowedContactItemAvailabilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContactItem_availability value
func (v ContactItemAvailability) Ptr() *ContactItemAvailability {
	return &v
}

type NullableContactItemAvailability struct {
	value *ContactItemAvailability
	isSet bool
}

func (v NullableContactItemAvailability) Get() *ContactItemAvailability {
	return v.value
}

func (v *NullableContactItemAvailability) Set(val *ContactItemAvailability) {
	v.value = val
	v.isSet = true
}

func (v NullableContactItemAvailability) IsSet() bool {
	return v.isSet
}

func (v *NullableContactItemAvailability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactItemAvailability(val *ContactItemAvailability) *NullableContactItemAvailability {
	return &NullableContactItemAvailability{value: val, isSet: true}
}

func (v NullableContactItemAvailability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactItemAvailability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

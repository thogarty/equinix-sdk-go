/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// RoutingProtocolRequestBgpAllOfCustomerAsnRange Customer Autonomous System Number range
type RoutingProtocolRequestBgpAllOfCustomerAsnRange string

// List of RoutingProtocolRequestBgp_allOf_customerAsnRange
const (
	ROUTINGPROTOCOLREQUESTBGPALLOFCUSTOMERASNRANGE__16 RoutingProtocolRequestBgpAllOfCustomerAsnRange = "BITS_16"
	ROUTINGPROTOCOLREQUESTBGPALLOFCUSTOMERASNRANGE__32 RoutingProtocolRequestBgpAllOfCustomerAsnRange = "BITS_32"
)

// All allowed values of RoutingProtocolRequestBgpAllOfCustomerAsnRange enum
var AllowedRoutingProtocolRequestBgpAllOfCustomerAsnRangeEnumValues = []RoutingProtocolRequestBgpAllOfCustomerAsnRange{
	"BITS_16",
	"BITS_32",
}

func (v *RoutingProtocolRequestBgpAllOfCustomerAsnRange) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoutingProtocolRequestBgpAllOfCustomerAsnRange(value)
	for _, existing := range AllowedRoutingProtocolRequestBgpAllOfCustomerAsnRangeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoutingProtocolRequestBgpAllOfCustomerAsnRange", value)
}

// NewRoutingProtocolRequestBgpAllOfCustomerAsnRangeFromValue returns a pointer to a valid RoutingProtocolRequestBgpAllOfCustomerAsnRange
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoutingProtocolRequestBgpAllOfCustomerAsnRangeFromValue(v string) (*RoutingProtocolRequestBgpAllOfCustomerAsnRange, error) {
	ev := RoutingProtocolRequestBgpAllOfCustomerAsnRange(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoutingProtocolRequestBgpAllOfCustomerAsnRange: valid values are %v", v, AllowedRoutingProtocolRequestBgpAllOfCustomerAsnRangeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoutingProtocolRequestBgpAllOfCustomerAsnRange) IsValid() bool {
	for _, existing := range AllowedRoutingProtocolRequestBgpAllOfCustomerAsnRangeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoutingProtocolRequestBgp_allOf_customerAsnRange value
func (v RoutingProtocolRequestBgpAllOfCustomerAsnRange) Ptr() *RoutingProtocolRequestBgpAllOfCustomerAsnRange {
	return &v
}

type NullableRoutingProtocolRequestBgpAllOfCustomerAsnRange struct {
	value *RoutingProtocolRequestBgpAllOfCustomerAsnRange
	isSet bool
}

func (v NullableRoutingProtocolRequestBgpAllOfCustomerAsnRange) Get() *RoutingProtocolRequestBgpAllOfCustomerAsnRange {
	return v.value
}

func (v *NullableRoutingProtocolRequestBgpAllOfCustomerAsnRange) Set(val *RoutingProtocolRequestBgpAllOfCustomerAsnRange) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProtocolRequestBgpAllOfCustomerAsnRange) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProtocolRequestBgpAllOfCustomerAsnRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProtocolRequestBgpAllOfCustomerAsnRange(val *RoutingProtocolRequestBgpAllOfCustomerAsnRange) *NullableRoutingProtocolRequestBgpAllOfCustomerAsnRange {
	return &NullableRoutingProtocolRequestBgpAllOfCustomerAsnRange{value: val, isSet: true}
}

func (v NullableRoutingProtocolRequestBgpAllOfCustomerAsnRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProtocolRequestBgpAllOfCustomerAsnRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// RoutingProtocolReadModel - struct for RoutingProtocolReadModel
type RoutingProtocolReadModel struct {
	RoutingProtocolReadModelBgp    *RoutingProtocolReadModelBgp
	RoutingProtocolReadModelDirect *RoutingProtocolReadModelDirect
	RoutingProtocolReadModelStatic *RoutingProtocolReadModelStatic
}

// RoutingProtocolReadModelBgpAsRoutingProtocolReadModel is a convenience function that returns RoutingProtocolReadModelBgp wrapped in RoutingProtocolReadModel
func RoutingProtocolReadModelBgpAsRoutingProtocolReadModel(v *RoutingProtocolReadModelBgp) RoutingProtocolReadModel {
	return RoutingProtocolReadModel{
		RoutingProtocolReadModelBgp: v,
	}
}

// RoutingProtocolReadModelDirectAsRoutingProtocolReadModel is a convenience function that returns RoutingProtocolReadModelDirect wrapped in RoutingProtocolReadModel
func RoutingProtocolReadModelDirectAsRoutingProtocolReadModel(v *RoutingProtocolReadModelDirect) RoutingProtocolReadModel {
	return RoutingProtocolReadModel{
		RoutingProtocolReadModelDirect: v,
	}
}

// RoutingProtocolReadModelStaticAsRoutingProtocolReadModel is a convenience function that returns RoutingProtocolReadModelStatic wrapped in RoutingProtocolReadModel
func RoutingProtocolReadModelStaticAsRoutingProtocolReadModel(v *RoutingProtocolReadModelStatic) RoutingProtocolReadModel {
	return RoutingProtocolReadModel{
		RoutingProtocolReadModelStatic: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *RoutingProtocolReadModel) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'BGP'
	if jsonDict["type"] == "BGP" {
		// try to unmarshal JSON data into RoutingProtocolReadModelBgp
		err = json.Unmarshal(data, &dst.RoutingProtocolReadModelBgp)
		if err == nil {
			return nil // data stored in dst.RoutingProtocolReadModelBgp, return on the first match
		} else {
			dst.RoutingProtocolReadModelBgp = nil
			return fmt.Errorf("failed to unmarshal RoutingProtocolReadModel as RoutingProtocolReadModelBgp: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DIRECT'
	if jsonDict["type"] == "DIRECT" {
		// try to unmarshal JSON data into RoutingProtocolReadModelDirect
		err = json.Unmarshal(data, &dst.RoutingProtocolReadModelDirect)
		if err == nil {
			return nil // data stored in dst.RoutingProtocolReadModelDirect, return on the first match
		} else {
			dst.RoutingProtocolReadModelDirect = nil
			return fmt.Errorf("failed to unmarshal RoutingProtocolReadModel as RoutingProtocolReadModelDirect: %s", err.Error())
		}
	}

	// check if the discriminator value is 'STATIC'
	if jsonDict["type"] == "STATIC" {
		// try to unmarshal JSON data into RoutingProtocolReadModelStatic
		err = json.Unmarshal(data, &dst.RoutingProtocolReadModelStatic)
		if err == nil {
			return nil // data stored in dst.RoutingProtocolReadModelStatic, return on the first match
		} else {
			dst.RoutingProtocolReadModelStatic = nil
			return fmt.Errorf("failed to unmarshal RoutingProtocolReadModel as RoutingProtocolReadModelStatic: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RoutingProtocolReadModelBgp'
	if jsonDict["type"] == "RoutingProtocolReadModelBgp" {
		// try to unmarshal JSON data into RoutingProtocolReadModelBgp
		err = json.Unmarshal(data, &dst.RoutingProtocolReadModelBgp)
		if err == nil {
			return nil // data stored in dst.RoutingProtocolReadModelBgp, return on the first match
		} else {
			dst.RoutingProtocolReadModelBgp = nil
			return fmt.Errorf("failed to unmarshal RoutingProtocolReadModel as RoutingProtocolReadModelBgp: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RoutingProtocolReadModelDirect'
	if jsonDict["type"] == "RoutingProtocolReadModelDirect" {
		// try to unmarshal JSON data into RoutingProtocolReadModelDirect
		err = json.Unmarshal(data, &dst.RoutingProtocolReadModelDirect)
		if err == nil {
			return nil // data stored in dst.RoutingProtocolReadModelDirect, return on the first match
		} else {
			dst.RoutingProtocolReadModelDirect = nil
			return fmt.Errorf("failed to unmarshal RoutingProtocolReadModel as RoutingProtocolReadModelDirect: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RoutingProtocolReadModelStatic'
	if jsonDict["type"] == "RoutingProtocolReadModelStatic" {
		// try to unmarshal JSON data into RoutingProtocolReadModelStatic
		err = json.Unmarshal(data, &dst.RoutingProtocolReadModelStatic)
		if err == nil {
			return nil // data stored in dst.RoutingProtocolReadModelStatic, return on the first match
		} else {
			dst.RoutingProtocolReadModelStatic = nil
			return fmt.Errorf("failed to unmarshal RoutingProtocolReadModel as RoutingProtocolReadModelStatic: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RoutingProtocolReadModel) MarshalJSON() ([]byte, error) {
	if src.RoutingProtocolReadModelBgp != nil {
		return json.Marshal(&src.RoutingProtocolReadModelBgp)
	}

	if src.RoutingProtocolReadModelDirect != nil {
		return json.Marshal(&src.RoutingProtocolReadModelDirect)
	}

	if src.RoutingProtocolReadModelStatic != nil {
		return json.Marshal(&src.RoutingProtocolReadModelStatic)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RoutingProtocolReadModel) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.RoutingProtocolReadModelBgp != nil {
		return obj.RoutingProtocolReadModelBgp
	}

	if obj.RoutingProtocolReadModelDirect != nil {
		return obj.RoutingProtocolReadModelDirect
	}

	if obj.RoutingProtocolReadModelStatic != nil {
		return obj.RoutingProtocolReadModelStatic
	}

	// all schemas are nil
	return nil
}

type NullableRoutingProtocolReadModel struct {
	value *RoutingProtocolReadModel
	isSet bool
}

func (v NullableRoutingProtocolReadModel) Get() *RoutingProtocolReadModel {
	return v.value
}

func (v *NullableRoutingProtocolReadModel) Set(val *RoutingProtocolReadModel) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProtocolReadModel) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProtocolReadModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProtocolReadModel(val *RoutingProtocolReadModel) *NullableRoutingProtocolReadModel {
	return &NullableRoutingProtocolReadModel{value: val, isSet: true}
}

func (v NullableRoutingProtocolReadModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProtocolReadModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

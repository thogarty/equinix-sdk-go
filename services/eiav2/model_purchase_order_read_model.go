/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// checks if the PurchaseOrderReadModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PurchaseOrderReadModel{}

// PurchaseOrderReadModel struct for PurchaseOrderReadModel
type PurchaseOrderReadModel struct {
	// Purchase Order URI
	Href string                     `json:"href"`
	Type PurchaseOrderReadModelType `json:"type"`
	// Purchase Order number
	Number               string `json:"number"`
	AdditionalProperties map[string]interface{}
}

type _PurchaseOrderReadModel PurchaseOrderReadModel

// NewPurchaseOrderReadModel instantiates a new PurchaseOrderReadModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchaseOrderReadModel(href string, type_ PurchaseOrderReadModelType, number string) *PurchaseOrderReadModel {
	this := PurchaseOrderReadModel{}
	this.Href = href
	this.Type = type_
	this.Number = number
	return &this
}

// NewPurchaseOrderReadModelWithDefaults instantiates a new PurchaseOrderReadModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchaseOrderReadModelWithDefaults() *PurchaseOrderReadModel {
	this := PurchaseOrderReadModel{}
	return &this
}

// GetHref returns the Href field value
func (o *PurchaseOrderReadModel) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *PurchaseOrderReadModel) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *PurchaseOrderReadModel) SetHref(v string) {
	o.Href = v
}

// GetType returns the Type field value
func (o *PurchaseOrderReadModel) GetType() PurchaseOrderReadModelType {
	if o == nil {
		var ret PurchaseOrderReadModelType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PurchaseOrderReadModel) GetTypeOk() (*PurchaseOrderReadModelType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PurchaseOrderReadModel) SetType(v PurchaseOrderReadModelType) {
	o.Type = v
}

// GetNumber returns the Number field value
func (o *PurchaseOrderReadModel) GetNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *PurchaseOrderReadModel) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *PurchaseOrderReadModel) SetNumber(v string) {
	o.Number = v
}

func (o PurchaseOrderReadModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PurchaseOrderReadModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["href"] = o.Href
	toSerialize["type"] = o.Type
	toSerialize["number"] = o.Number

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PurchaseOrderReadModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"href",
		"type",
		"number",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPurchaseOrderReadModel := _PurchaseOrderReadModel{}

	err = json.Unmarshal(data, &varPurchaseOrderReadModel)

	if err != nil {
		return err
	}

	*o = PurchaseOrderReadModel(varPurchaseOrderReadModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "type")
		delete(additionalProperties, "number")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePurchaseOrderReadModel struct {
	value *PurchaseOrderReadModel
	isSet bool
}

func (v NullablePurchaseOrderReadModel) Get() *PurchaseOrderReadModel {
	return v.value
}

func (v *NullablePurchaseOrderReadModel) Set(val *PurchaseOrderReadModel) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseOrderReadModel) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseOrderReadModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseOrderReadModel(val *PurchaseOrderReadModel) *NullablePurchaseOrderReadModel {
	return &NullablePurchaseOrderReadModel{value: val, isSet: true}
}

func (v NullablePurchaseOrderReadModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseOrderReadModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

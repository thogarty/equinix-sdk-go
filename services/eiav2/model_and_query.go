/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// checks if the AndQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AndQuery{}

// AndQuery struct for AndQuery
type AndQuery struct {
	Property             string           `json:"property"`
	Operator             AndQueryOperator `json:"operator"`
	Values               []string         `json:"values"`
	AdditionalProperties map[string]interface{}
}

type _AndQuery AndQuery

// NewAndQuery instantiates a new AndQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAndQuery(property string, operator AndQueryOperator, values []string) *AndQuery {
	this := AndQuery{}
	this.Property = property
	this.Operator = operator
	this.Values = values
	return &this
}

// NewAndQueryWithDefaults instantiates a new AndQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAndQueryWithDefaults() *AndQuery {
	this := AndQuery{}
	return &this
}

// GetProperty returns the Property field value
func (o *AndQuery) GetProperty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Property
}

// GetPropertyOk returns a tuple with the Property field value
// and a boolean to check if the value has been set.
func (o *AndQuery) GetPropertyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Property, true
}

// SetProperty sets field value
func (o *AndQuery) SetProperty(v string) {
	o.Property = v
}

// GetOperator returns the Operator field value
func (o *AndQuery) GetOperator() AndQueryOperator {
	if o == nil {
		var ret AndQueryOperator
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *AndQuery) GetOperatorOk() (*AndQueryOperator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *AndQuery) SetOperator(v AndQueryOperator) {
	o.Operator = v
}

// GetValues returns the Values field value
func (o *AndQuery) GetValues() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *AndQuery) GetValuesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *AndQuery) SetValues(v []string) {
	o.Values = v
}

func (o AndQuery) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AndQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["property"] = o.Property
	toSerialize["operator"] = o.Operator
	toSerialize["values"] = o.Values

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AndQuery) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"property",
		"operator",
		"values",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAndQuery := _AndQuery{}

	err = json.Unmarshal(data, &varAndQuery)

	if err != nil {
		return err
	}

	*o = AndQuery(varAndQuery)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "property")
		delete(additionalProperties, "operator")
		delete(additionalProperties, "values")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAndQuery struct {
	value *AndQuery
	isSet bool
}

func (v NullableAndQuery) Get() *AndQuery {
	return v.value
}

func (v *NullableAndQuery) Set(val *AndQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableAndQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableAndQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAndQuery(val *AndQuery) *NullableAndQuery {
	return &NullableAndQuery{value: val, isSet: true}
}

func (v NullableAndQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAndQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

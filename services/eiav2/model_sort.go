/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// checks if the Sort type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sort{}

// Sort struct for Sort
type Sort struct {
	Direction SortDirection `json:"direction"`
	// property used for sorting
	Property             string `json:"property"`
	AdditionalProperties map[string]interface{}
}

type _Sort Sort

// NewSort instantiates a new Sort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSort(direction SortDirection, property string) *Sort {
	this := Sort{}
	this.Direction = direction
	this.Property = property
	return &this
}

// NewSortWithDefaults instantiates a new Sort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSortWithDefaults() *Sort {
	this := Sort{}
	var direction SortDirection = SORTDIRECTION_ASC
	this.Direction = direction
	return &this
}

// GetDirection returns the Direction field value
func (o *Sort) GetDirection() SortDirection {
	if o == nil {
		var ret SortDirection
		return ret
	}

	return o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value
// and a boolean to check if the value has been set.
func (o *Sort) GetDirectionOk() (*SortDirection, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Direction, true
}

// SetDirection sets field value
func (o *Sort) SetDirection(v SortDirection) {
	o.Direction = v
}

// GetProperty returns the Property field value
func (o *Sort) GetProperty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Property
}

// GetPropertyOk returns a tuple with the Property field value
// and a boolean to check if the value has been set.
func (o *Sort) GetPropertyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Property, true
}

// SetProperty sets field value
func (o *Sort) SetProperty(v string) {
	o.Property = v
}

func (o Sort) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sort) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["direction"] = o.Direction
	toSerialize["property"] = o.Property

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Sort) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"direction",
		"property",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSort := _Sort{}

	err = json.Unmarshal(data, &varSort)

	if err != nil {
		return err
	}

	*o = Sort(varSort)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "direction")
		delete(additionalProperties, "property")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSort struct {
	value *Sort
	isSet bool
}

func (v NullableSort) Get() *Sort {
	return v.value
}

func (v *NullableSort) Set(val *Sort) {
	v.value = val
	v.isSet = true
}

func (v NullableSort) IsSet() bool {
	return v.isSet
}

func (v *NullableSort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSort(val *Sort) *NullableSort {
	return &NullableSort{value: val, isSet: true}
}

func (v NullableSort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

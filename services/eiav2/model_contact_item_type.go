/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// ContactItemType Contact type
type ContactItemType string

// List of ContactItem_type
const (
	CONTACTITEMTYPE_NOTIFICATION ContactItemType = "NOTIFICATION"
	CONTACTITEMTYPE_TECHNICAL    ContactItemType = "TECHNICAL"
	CONTACTITEMTYPE_ORDERING     ContactItemType = "ORDERING"
	CONTACTITEMTYPE_RESELLING    ContactItemType = "RESELLING"
	CONTACTITEMTYPE_BILLING      ContactItemType = "BILLING"
)

// All allowed values of ContactItemType enum
var AllowedContactItemTypeEnumValues = []ContactItemType{
	"NOTIFICATION",
	"TECHNICAL",
	"ORDERING",
	"RESELLING",
	"BILLING",
}

func (v *ContactItemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContactItemType(value)
	for _, existing := range AllowedContactItemTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContactItemType", value)
}

// NewContactItemTypeFromValue returns a pointer to a valid ContactItemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContactItemTypeFromValue(v string) (*ContactItemType, error) {
	ev := ContactItemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContactItemType: valid values are %v", v, AllowedContactItemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContactItemType) IsValid() bool {
	for _, existing := range AllowedContactItemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContactItem_type value
func (v ContactItemType) Ptr() *ContactItemType {
	return &v
}

type NullableContactItemType struct {
	value *ContactItemType
	isSet bool
}

func (v NullableContactItemType) Get() *ContactItemType {
	return v.value
}

func (v *NullableContactItemType) Set(val *ContactItemType) {
	v.value = val
	v.isSet = true
}

func (v NullableContactItemType) IsSet() bool {
	return v.isSet
}

func (v *NullableContactItemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactItemType(val *ContactItemType) *NullableContactItemType {
	return &NullableContactItemType{value: val, isSet: true}
}

func (v NullableContactItemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactItemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

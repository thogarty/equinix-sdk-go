/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// checks if the ASideService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ASideService{}

// ASideService struct for ASideService
type ASideService struct {
	Uuid                 string `json:"uuid"`
	AdditionalProperties map[string]interface{}
}

type _ASideService ASideService

// NewASideService instantiates a new ASideService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewASideService(uuid string) *ASideService {
	this := ASideService{}
	this.Uuid = uuid
	return &this
}

// NewASideServiceWithDefaults instantiates a new ASideService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewASideServiceWithDefaults() *ASideService {
	this := ASideService{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *ASideService) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *ASideService) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *ASideService) SetUuid(v string) {
	o.Uuid = v
}

func (o ASideService) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ASideService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ASideService) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varASideService := _ASideService{}

	err = json.Unmarshal(data, &varASideService)

	if err != nil {
		return err
	}

	*o = ASideService(varASideService)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableASideService struct {
	value *ASideService
	isSet bool
}

func (v NullableASideService) Get() *ASideService {
	return v.value
}

func (v *NullableASideService) Set(val *ASideService) {
	v.value = val
	v.isSet = true
}

func (v NullableASideService) IsSet() bool {
	return v.isSet
}

func (v *NullableASideService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableASideService(val *ASideService) *NullableASideService {
	return &NullableASideService{value: val, isSet: true}
}

func (v NullableASideService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableASideService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

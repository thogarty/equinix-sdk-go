/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// checks if the Ibx type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ibx{}

// Ibx IBX object
type Ibx struct {
	Href        string     `json:"href"`
	CountryCode *string    `json:"countryCode,omitempty"`
	CountryName *string    `json:"countryName,omitempty"`
	Region      *IbxRegion `json:"region,omitempty"`
	MetroCode   *string    `json:"metroCode,omitempty"`
	// IBX data center code
	IbxCode              *string         `json:"ibxCode,omitempty"`
	GeoCoordinates       *GeoCoordinates `json:"geoCoordinates,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Ibx Ibx

// NewIbx instantiates a new Ibx object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIbx(href string) *Ibx {
	this := Ibx{}
	this.Href = href
	return &this
}

// NewIbxWithDefaults instantiates a new Ibx object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIbxWithDefaults() *Ibx {
	this := Ibx{}
	return &this
}

// GetHref returns the Href field value
func (o *Ibx) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *Ibx) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *Ibx) SetHref(v string) {
	o.Href = v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *Ibx) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ibx) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *Ibx) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *Ibx) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetCountryName returns the CountryName field value if set, zero value otherwise.
func (o *Ibx) GetCountryName() string {
	if o == nil || IsNil(o.CountryName) {
		var ret string
		return ret
	}
	return *o.CountryName
}

// GetCountryNameOk returns a tuple with the CountryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ibx) GetCountryNameOk() (*string, bool) {
	if o == nil || IsNil(o.CountryName) {
		return nil, false
	}
	return o.CountryName, true
}

// HasCountryName returns a boolean if a field has been set.
func (o *Ibx) HasCountryName() bool {
	if o != nil && !IsNil(o.CountryName) {
		return true
	}

	return false
}

// SetCountryName gets a reference to the given string and assigns it to the CountryName field.
func (o *Ibx) SetCountryName(v string) {
	o.CountryName = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *Ibx) GetRegion() IbxRegion {
	if o == nil || IsNil(o.Region) {
		var ret IbxRegion
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ibx) GetRegionOk() (*IbxRegion, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *Ibx) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given IbxRegion and assigns it to the Region field.
func (o *Ibx) SetRegion(v IbxRegion) {
	o.Region = &v
}

// GetMetroCode returns the MetroCode field value if set, zero value otherwise.
func (o *Ibx) GetMetroCode() string {
	if o == nil || IsNil(o.MetroCode) {
		var ret string
		return ret
	}
	return *o.MetroCode
}

// GetMetroCodeOk returns a tuple with the MetroCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ibx) GetMetroCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MetroCode) {
		return nil, false
	}
	return o.MetroCode, true
}

// HasMetroCode returns a boolean if a field has been set.
func (o *Ibx) HasMetroCode() bool {
	if o != nil && !IsNil(o.MetroCode) {
		return true
	}

	return false
}

// SetMetroCode gets a reference to the given string and assigns it to the MetroCode field.
func (o *Ibx) SetMetroCode(v string) {
	o.MetroCode = &v
}

// GetIbxCode returns the IbxCode field value if set, zero value otherwise.
func (o *Ibx) GetIbxCode() string {
	if o == nil || IsNil(o.IbxCode) {
		var ret string
		return ret
	}
	return *o.IbxCode
}

// GetIbxCodeOk returns a tuple with the IbxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ibx) GetIbxCodeOk() (*string, bool) {
	if o == nil || IsNil(o.IbxCode) {
		return nil, false
	}
	return o.IbxCode, true
}

// HasIbxCode returns a boolean if a field has been set.
func (o *Ibx) HasIbxCode() bool {
	if o != nil && !IsNil(o.IbxCode) {
		return true
	}

	return false
}

// SetIbxCode gets a reference to the given string and assigns it to the IbxCode field.
func (o *Ibx) SetIbxCode(v string) {
	o.IbxCode = &v
}

// GetGeoCoordinates returns the GeoCoordinates field value if set, zero value otherwise.
func (o *Ibx) GetGeoCoordinates() GeoCoordinates {
	if o == nil || IsNil(o.GeoCoordinates) {
		var ret GeoCoordinates
		return ret
	}
	return *o.GeoCoordinates
}

// GetGeoCoordinatesOk returns a tuple with the GeoCoordinates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ibx) GetGeoCoordinatesOk() (*GeoCoordinates, bool) {
	if o == nil || IsNil(o.GeoCoordinates) {
		return nil, false
	}
	return o.GeoCoordinates, true
}

// HasGeoCoordinates returns a boolean if a field has been set.
func (o *Ibx) HasGeoCoordinates() bool {
	if o != nil && !IsNil(o.GeoCoordinates) {
		return true
	}

	return false
}

// SetGeoCoordinates gets a reference to the given GeoCoordinates and assigns it to the GeoCoordinates field.
func (o *Ibx) SetGeoCoordinates(v GeoCoordinates) {
	o.GeoCoordinates = &v
}

func (o Ibx) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ibx) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["href"] = o.Href
	if !IsNil(o.CountryCode) {
		toSerialize["countryCode"] = o.CountryCode
	}
	if !IsNil(o.CountryName) {
		toSerialize["countryName"] = o.CountryName
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.MetroCode) {
		toSerialize["metroCode"] = o.MetroCode
	}
	if !IsNil(o.IbxCode) {
		toSerialize["ibxCode"] = o.IbxCode
	}
	if !IsNil(o.GeoCoordinates) {
		toSerialize["geoCoordinates"] = o.GeoCoordinates
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Ibx) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"href",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIbx := _Ibx{}

	err = json.Unmarshal(data, &varIbx)

	if err != nil {
		return err
	}

	*o = Ibx(varIbx)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "countryCode")
		delete(additionalProperties, "countryName")
		delete(additionalProperties, "region")
		delete(additionalProperties, "metroCode")
		delete(additionalProperties, "ibxCode")
		delete(additionalProperties, "geoCoordinates")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIbx struct {
	value *Ibx
	isSet bool
}

func (v NullableIbx) Get() *Ibx {
	return v.value
}

func (v *NullableIbx) Set(val *Ibx) {
	v.value = val
	v.isSet = true
}

func (v NullableIbx) IsSet() bool {
	return v.isSet
}

func (v *NullableIbx) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIbx(val *Ibx) *NullableIbx {
	return &NullableIbx{value: val, isSet: true}
}

func (v NullableIbx) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIbx) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

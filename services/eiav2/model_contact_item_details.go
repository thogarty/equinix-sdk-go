/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
)

// checks if the ContactItemDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactItemDetails{}

// ContactItemDetails struct for ContactItemDetails
type ContactItemDetails struct {
	Type  *ContactItemDetailsType `json:"type,omitempty"`
	Value *string                 `json:"value,omitempty"`
	// Contact additional info
	Notes                *string `json:"notes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ContactItemDetails ContactItemDetails

// NewContactItemDetails instantiates a new ContactItemDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactItemDetails() *ContactItemDetails {
	this := ContactItemDetails{}
	return &this
}

// NewContactItemDetailsWithDefaults instantiates a new ContactItemDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactItemDetailsWithDefaults() *ContactItemDetails {
	this := ContactItemDetails{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ContactItemDetails) GetType() ContactItemDetailsType {
	if o == nil || IsNil(o.Type) {
		var ret ContactItemDetailsType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactItemDetails) GetTypeOk() (*ContactItemDetailsType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ContactItemDetails) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ContactItemDetailsType and assigns it to the Type field.
func (o *ContactItemDetails) SetType(v ContactItemDetailsType) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ContactItemDetails) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactItemDetails) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ContactItemDetails) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ContactItemDetails) SetValue(v string) {
	o.Value = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *ContactItemDetails) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactItemDetails) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *ContactItemDetails) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *ContactItemDetails) SetNotes(v string) {
	o.Notes = &v
}

func (o ContactItemDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactItemDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ContactItemDetails) UnmarshalJSON(data []byte) (err error) {
	varContactItemDetails := _ContactItemDetails{}

	err = json.Unmarshal(data, &varContactItemDetails)

	if err != nil {
		return err
	}

	*o = ContactItemDetails(varContactItemDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "value")
		delete(additionalProperties, "notes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContactItemDetails struct {
	value *ContactItemDetails
	isSet bool
}

func (v NullableContactItemDetails) Get() *ContactItemDetails {
	return v.value
}

func (v *NullableContactItemDetails) Set(val *ContactItemDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableContactItemDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableContactItemDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactItemDetails(val *ContactItemDetails) *NullableContactItemDetails {
	return &NullableContactItemDetails{value: val, isSet: true}
}

func (v NullableContactItemDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactItemDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

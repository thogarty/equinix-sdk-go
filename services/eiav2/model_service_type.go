/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// ServiceType SINGLE - Internet Access Service supported with one Connection originating from one AccessPoint on the ASide DUAL - Internet Access Service supported with two redundant Connections originating from two redundant AccessPoints on the Aside and terminating to two redundant Internet Routers on the ZSide
type ServiceType string

// List of ServiceType
const (
	SERVICETYPE_SINGLE ServiceType = "SINGLE"
	SERVICETYPE_DUAL   ServiceType = "DUAL"
)

// All allowed values of ServiceType enum
var AllowedServiceTypeEnumValues = []ServiceType{
	"SINGLE",
	"DUAL",
}

func (v *ServiceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceType(value)
	for _, existing := range AllowedServiceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceType", value)
}

// NewServiceTypeFromValue returns a pointer to a valid ServiceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceTypeFromValue(v string) (*ServiceType, error) {
	ev := ServiceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceType: valid values are %v", v, AllowedServiceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceType) IsValid() bool {
	for _, existing := range AllowedServiceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceType value
func (v ServiceType) Ptr() *ServiceType {
	return &v
}

type NullableServiceType struct {
	value *ServiceType
	isSet bool
}

func (v NullableServiceType) Get() *ServiceType {
	return v.value
}

func (v *NullableServiceType) Set(val *ServiceType) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceType) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceType(val *ServiceType) *NullableServiceType {
	return &NullableServiceType{value: val, isSet: true}
}

func (v NullableServiceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

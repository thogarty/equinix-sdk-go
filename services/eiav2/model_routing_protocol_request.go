/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// RoutingProtocolRequest - struct for RoutingProtocolRequest
type RoutingProtocolRequest struct {
	RoutingProtocolRequestBgp    *RoutingProtocolRequestBgp
	RoutingProtocolRequestDirect *RoutingProtocolRequestDirect
	RoutingProtocolRequestStatic *RoutingProtocolRequestStatic
}

// RoutingProtocolRequestBgpAsRoutingProtocolRequest is a convenience function that returns RoutingProtocolRequestBgp wrapped in RoutingProtocolRequest
func RoutingProtocolRequestBgpAsRoutingProtocolRequest(v *RoutingProtocolRequestBgp) RoutingProtocolRequest {
	return RoutingProtocolRequest{
		RoutingProtocolRequestBgp: v,
	}
}

// RoutingProtocolRequestDirectAsRoutingProtocolRequest is a convenience function that returns RoutingProtocolRequestDirect wrapped in RoutingProtocolRequest
func RoutingProtocolRequestDirectAsRoutingProtocolRequest(v *RoutingProtocolRequestDirect) RoutingProtocolRequest {
	return RoutingProtocolRequest{
		RoutingProtocolRequestDirect: v,
	}
}

// RoutingProtocolRequestStaticAsRoutingProtocolRequest is a convenience function that returns RoutingProtocolRequestStatic wrapped in RoutingProtocolRequest
func RoutingProtocolRequestStaticAsRoutingProtocolRequest(v *RoutingProtocolRequestStatic) RoutingProtocolRequest {
	return RoutingProtocolRequest{
		RoutingProtocolRequestStatic: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *RoutingProtocolRequest) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'BGP'
	if jsonDict["type"] == "BGP" {
		// try to unmarshal JSON data into RoutingProtocolRequestBgp
		err = json.Unmarshal(data, &dst.RoutingProtocolRequestBgp)
		if err == nil {
			return nil // data stored in dst.RoutingProtocolRequestBgp, return on the first match
		} else {
			dst.RoutingProtocolRequestBgp = nil
			return fmt.Errorf("failed to unmarshal RoutingProtocolRequest as RoutingProtocolRequestBgp: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DIRECT'
	if jsonDict["type"] == "DIRECT" {
		// try to unmarshal JSON data into RoutingProtocolRequestDirect
		err = json.Unmarshal(data, &dst.RoutingProtocolRequestDirect)
		if err == nil {
			return nil // data stored in dst.RoutingProtocolRequestDirect, return on the first match
		} else {
			dst.RoutingProtocolRequestDirect = nil
			return fmt.Errorf("failed to unmarshal RoutingProtocolRequest as RoutingProtocolRequestDirect: %s", err.Error())
		}
	}

	// check if the discriminator value is 'STATIC'
	if jsonDict["type"] == "STATIC" {
		// try to unmarshal JSON data into RoutingProtocolRequestStatic
		err = json.Unmarshal(data, &dst.RoutingProtocolRequestStatic)
		if err == nil {
			return nil // data stored in dst.RoutingProtocolRequestStatic, return on the first match
		} else {
			dst.RoutingProtocolRequestStatic = nil
			return fmt.Errorf("failed to unmarshal RoutingProtocolRequest as RoutingProtocolRequestStatic: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RoutingProtocolRequestBgp'
	if jsonDict["type"] == "RoutingProtocolRequestBgp" {
		// try to unmarshal JSON data into RoutingProtocolRequestBgp
		err = json.Unmarshal(data, &dst.RoutingProtocolRequestBgp)
		if err == nil {
			return nil // data stored in dst.RoutingProtocolRequestBgp, return on the first match
		} else {
			dst.RoutingProtocolRequestBgp = nil
			return fmt.Errorf("failed to unmarshal RoutingProtocolRequest as RoutingProtocolRequestBgp: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RoutingProtocolRequestDirect'
	if jsonDict["type"] == "RoutingProtocolRequestDirect" {
		// try to unmarshal JSON data into RoutingProtocolRequestDirect
		err = json.Unmarshal(data, &dst.RoutingProtocolRequestDirect)
		if err == nil {
			return nil // data stored in dst.RoutingProtocolRequestDirect, return on the first match
		} else {
			dst.RoutingProtocolRequestDirect = nil
			return fmt.Errorf("failed to unmarshal RoutingProtocolRequest as RoutingProtocolRequestDirect: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RoutingProtocolRequestStatic'
	if jsonDict["type"] == "RoutingProtocolRequestStatic" {
		// try to unmarshal JSON data into RoutingProtocolRequestStatic
		err = json.Unmarshal(data, &dst.RoutingProtocolRequestStatic)
		if err == nil {
			return nil // data stored in dst.RoutingProtocolRequestStatic, return on the first match
		} else {
			dst.RoutingProtocolRequestStatic = nil
			return fmt.Errorf("failed to unmarshal RoutingProtocolRequest as RoutingProtocolRequestStatic: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RoutingProtocolRequest) MarshalJSON() ([]byte, error) {
	if src.RoutingProtocolRequestBgp != nil {
		return json.Marshal(&src.RoutingProtocolRequestBgp)
	}

	if src.RoutingProtocolRequestDirect != nil {
		return json.Marshal(&src.RoutingProtocolRequestDirect)
	}

	if src.RoutingProtocolRequestStatic != nil {
		return json.Marshal(&src.RoutingProtocolRequestStatic)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RoutingProtocolRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.RoutingProtocolRequestBgp != nil {
		return obj.RoutingProtocolRequestBgp
	}

	if obj.RoutingProtocolRequestDirect != nil {
		return obj.RoutingProtocolRequestDirect
	}

	if obj.RoutingProtocolRequestStatic != nil {
		return obj.RoutingProtocolRequestStatic
	}

	// all schemas are nil
	return nil
}

type NullableRoutingProtocolRequest struct {
	value *RoutingProtocolRequest
	isSet bool
}

func (v NullableRoutingProtocolRequest) Get() *RoutingProtocolRequest {
	return v.value
}

func (v *NullableRoutingProtocolRequest) Set(val *RoutingProtocolRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProtocolRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProtocolRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProtocolRequest(val *RoutingProtocolRequest) *NullableRoutingProtocolRequest {
	return &NullableRoutingProtocolRequest{value: val, isSet: true}
}

func (v NullableRoutingProtocolRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProtocolRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

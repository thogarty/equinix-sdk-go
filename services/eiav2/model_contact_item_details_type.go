/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// ContactItemDetailsType the model 'ContactItemDetailsType'
type ContactItemDetailsType string

// List of ContactItemDetails_type
const (
	CONTACTITEMDETAILSTYPE_EMAIL           ContactItemDetailsType = "EMAIL"
	CONTACTITEMDETAILSTYPE_PHONE           ContactItemDetailsType = "PHONE"
	CONTACTITEMDETAILSTYPE_MOBILE          ContactItemDetailsType = "MOBILE"
	CONTACTITEMDETAILSTYPE_SECONDARY_EMAIL ContactItemDetailsType = "SECONDARY_EMAIL"
)

// All allowed values of ContactItemDetailsType enum
var AllowedContactItemDetailsTypeEnumValues = []ContactItemDetailsType{
	"EMAIL",
	"PHONE",
	"MOBILE",
	"SECONDARY_EMAIL",
}

func (v *ContactItemDetailsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContactItemDetailsType(value)
	for _, existing := range AllowedContactItemDetailsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContactItemDetailsType", value)
}

// NewContactItemDetailsTypeFromValue returns a pointer to a valid ContactItemDetailsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContactItemDetailsTypeFromValue(v string) (*ContactItemDetailsType, error) {
	ev := ContactItemDetailsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContactItemDetailsType: valid values are %v", v, AllowedContactItemDetailsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContactItemDetailsType) IsValid() bool {
	for _, existing := range AllowedContactItemDetailsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContactItemDetails_type value
func (v ContactItemDetailsType) Ptr() *ContactItemDetailsType {
	return &v
}

type NullableContactItemDetailsType struct {
	value *ContactItemDetailsType
	isSet bool
}

func (v NullableContactItemDetailsType) Get() *ContactItemDetailsType {
	return v.value
}

func (v *NullableContactItemDetailsType) Set(val *ContactItemDetailsType) {
	v.value = val
	v.isSet = true
}

func (v NullableContactItemDetailsType) IsSet() bool {
	return v.isSet
}

func (v *NullableContactItemDetailsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactItemDetailsType(val *ContactItemDetailsType) *NullableContactItemDetailsType {
	return &NullableContactItemDetailsType{value: val, isSet: true}
}

func (v NullableContactItemDetailsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactItemDetailsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

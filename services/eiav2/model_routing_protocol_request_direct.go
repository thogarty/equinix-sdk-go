/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// checks if the RoutingProtocolRequestDirect type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutingProtocolRequestDirect{}

// RoutingProtocolRequestDirect struct for RoutingProtocolRequestDirect
type RoutingProtocolRequestDirect struct {
	Tags []string `json:"tags,omitempty"`
	// Allowed values: - BGP - DIRECT - STATIC
	Type string `json:"type"`
	// Name of the routing protocol instance.
	Name *string `json:"name,omitempty"`
	// Description of the routing protocol instance
	Description          *string                           `json:"description,omitempty"`
	Ipv4                 *DirectRoutingProtocolIpv4Request `json:"ipv4,omitempty"`
	Ipv6                 *DirectRoutingProtocolIpv6Request `json:"ipv6,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RoutingProtocolRequestDirect RoutingProtocolRequestDirect

// NewRoutingProtocolRequestDirect instantiates a new RoutingProtocolRequestDirect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingProtocolRequestDirect(type_ string) *RoutingProtocolRequestDirect {
	this := RoutingProtocolRequestDirect{}
	this.Type = type_
	return &this
}

// NewRoutingProtocolRequestDirectWithDefaults instantiates a new RoutingProtocolRequestDirect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingProtocolRequestDirectWithDefaults() *RoutingProtocolRequestDirect {
	this := RoutingProtocolRequestDirect{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *RoutingProtocolRequestDirect) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolRequestDirect) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *RoutingProtocolRequestDirect) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *RoutingProtocolRequestDirect) SetTags(v []string) {
	o.Tags = v
}

// GetType returns the Type field value
func (o *RoutingProtocolRequestDirect) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RoutingProtocolRequestDirect) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RoutingProtocolRequestDirect) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RoutingProtocolRequestDirect) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolRequestDirect) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RoutingProtocolRequestDirect) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RoutingProtocolRequestDirect) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RoutingProtocolRequestDirect) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolRequestDirect) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RoutingProtocolRequestDirect) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RoutingProtocolRequestDirect) SetDescription(v string) {
	o.Description = &v
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *RoutingProtocolRequestDirect) GetIpv4() DirectRoutingProtocolIpv4Request {
	if o == nil || IsNil(o.Ipv4) {
		var ret DirectRoutingProtocolIpv4Request
		return ret
	}
	return *o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolRequestDirect) GetIpv4Ok() (*DirectRoutingProtocolIpv4Request, bool) {
	if o == nil || IsNil(o.Ipv4) {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *RoutingProtocolRequestDirect) HasIpv4() bool {
	if o != nil && !IsNil(o.Ipv4) {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given DirectRoutingProtocolIpv4Request and assigns it to the Ipv4 field.
func (o *RoutingProtocolRequestDirect) SetIpv4(v DirectRoutingProtocolIpv4Request) {
	o.Ipv4 = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *RoutingProtocolRequestDirect) GetIpv6() DirectRoutingProtocolIpv6Request {
	if o == nil || IsNil(o.Ipv6) {
		var ret DirectRoutingProtocolIpv6Request
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolRequestDirect) GetIpv6Ok() (*DirectRoutingProtocolIpv6Request, bool) {
	if o == nil || IsNil(o.Ipv6) {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *RoutingProtocolRequestDirect) HasIpv6() bool {
	if o != nil && !IsNil(o.Ipv6) {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given DirectRoutingProtocolIpv6Request and assigns it to the Ipv6 field.
func (o *RoutingProtocolRequestDirect) SetIpv6(v DirectRoutingProtocolIpv6Request) {
	o.Ipv6 = &v
}

func (o RoutingProtocolRequestDirect) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutingProtocolRequestDirect) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Ipv4) {
		toSerialize["ipv4"] = o.Ipv4
	}
	if !IsNil(o.Ipv6) {
		toSerialize["ipv6"] = o.Ipv6
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoutingProtocolRequestDirect) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoutingProtocolRequestDirect := _RoutingProtocolRequestDirect{}

	err = json.Unmarshal(data, &varRoutingProtocolRequestDirect)

	if err != nil {
		return err
	}

	*o = RoutingProtocolRequestDirect(varRoutingProtocolRequestDirect)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tags")
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "ipv4")
		delete(additionalProperties, "ipv6")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoutingProtocolRequestDirect struct {
	value *RoutingProtocolRequestDirect
	isSet bool
}

func (v NullableRoutingProtocolRequestDirect) Get() *RoutingProtocolRequestDirect {
	return v.value
}

func (v *NullableRoutingProtocolRequestDirect) Set(val *RoutingProtocolRequestDirect) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProtocolRequestDirect) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProtocolRequestDirect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProtocolRequestDirect(val *RoutingProtocolRequestDirect) *NullableRoutingProtocolRequestDirect {
	return &NullableRoutingProtocolRequestDirect{value: val, isSet: true}
}

func (v NullableRoutingProtocolRequestDirect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProtocolRequestDirect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

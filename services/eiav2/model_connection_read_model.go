/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// checks if the ConnectionReadModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionReadModel{}

// ConnectionReadModel struct for ConnectionReadModel
type ConnectionReadModel struct {
	Uuid string `json:"uuid"`
	// Connection URI
	Href                 string          `json:"href"`
	Type                 *ConnectionType `json:"type,omitempty"`
	ASide                ASide           `json:"aSide"`
	AdditionalProperties map[string]interface{}
}

type _ConnectionReadModel ConnectionReadModel

// NewConnectionReadModel instantiates a new ConnectionReadModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionReadModel(uuid string, href string, aSide ASide) *ConnectionReadModel {
	this := ConnectionReadModel{}
	this.Uuid = uuid
	this.Href = href
	this.ASide = aSide
	return &this
}

// NewConnectionReadModelWithDefaults instantiates a new ConnectionReadModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionReadModelWithDefaults() *ConnectionReadModel {
	this := ConnectionReadModel{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *ConnectionReadModel) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *ConnectionReadModel) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *ConnectionReadModel) SetUuid(v string) {
	o.Uuid = v
}

// GetHref returns the Href field value
func (o *ConnectionReadModel) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *ConnectionReadModel) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *ConnectionReadModel) SetHref(v string) {
	o.Href = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConnectionReadModel) GetType() ConnectionType {
	if o == nil || IsNil(o.Type) {
		var ret ConnectionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionReadModel) GetTypeOk() (*ConnectionType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConnectionReadModel) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ConnectionType and assigns it to the Type field.
func (o *ConnectionReadModel) SetType(v ConnectionType) {
	o.Type = &v
}

// GetASide returns the ASide field value
func (o *ConnectionReadModel) GetASide() ASide {
	if o == nil {
		var ret ASide
		return ret
	}

	return o.ASide
}

// GetASideOk returns a tuple with the ASide field value
// and a boolean to check if the value has been set.
func (o *ConnectionReadModel) GetASideOk() (*ASide, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ASide, true
}

// SetASide sets field value
func (o *ConnectionReadModel) SetASide(v ASide) {
	o.ASide = v
}

func (o ConnectionReadModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionReadModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["href"] = o.Href
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["aSide"] = o.ASide

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConnectionReadModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"href",
		"aSide",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectionReadModel := _ConnectionReadModel{}

	err = json.Unmarshal(data, &varConnectionReadModel)

	if err != nil {
		return err
	}

	*o = ConnectionReadModel(varConnectionReadModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "href")
		delete(additionalProperties, "type")
		delete(additionalProperties, "aSide")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConnectionReadModel struct {
	value *ConnectionReadModel
	isSet bool
}

func (v NullableConnectionReadModel) Get() *ConnectionReadModel {
	return v.value
}

func (v *NullableConnectionReadModel) Set(val *ConnectionReadModel) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionReadModel) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionReadModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionReadModel(val *ConnectionReadModel) *NullableConnectionReadModel {
	return &NullableConnectionReadModel{value: val, isSet: true}
}

func (v NullableConnectionReadModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionReadModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
